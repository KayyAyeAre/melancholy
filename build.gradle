apply plugin: "java"

version '1.0'

targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_17

sourceSets.main.java.srcDirs = ["src"]
sourceSets.main.resources.srcDirs = ["assets"]

repositories {
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url 'https://www.jitpack.io' }
}

ext {
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies {
    compileOnly "com.github.Anuken.Mindustry:core:v145.1"
    compileOnly "com.github.Anuken.Arc:arc-core:v145.1"
    annotationProcessor "com.github.Anuken:jabel:0.7.0"
}

jar {
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
    }
}

task jarAndroid {
    dependsOn "jar"

    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        def paras = "$dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar".toString()
        try {
            "d8 $paras".execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
        } catch (Exception ignored) {
            logger.lifecycle("d8 cannot be found in your PATH, so trying to use an absolute path.")
            def cmdOutput = new ByteArrayOutputStream()
            "where d8".execute().waitForProcessOutput(cmdOutput, System.err)
            def d8FullPath = cmdOutput.toString().replace("\r", "").replace("\n", "")
            logger.lifecycle("d8 was found at $d8FullPath")
            "$d8FullPath $paras".execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
        }
    }
}

task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}